// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/model/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/fitenne/youthcampus-dousheng/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserCtl is a mock of UserCtl interface.
type MockUserCtl struct {
	ctrl     *gomock.Controller
	recorder *MockUserCtlMockRecorder
}

// MockUserCtlMockRecorder is the mock recorder for MockUserCtl.
type MockUserCtlMockRecorder struct {
	mock *MockUserCtl
}

// NewMockUserCtl creates a new mock instance.
func NewMockUserCtl(ctrl *gomock.Controller) *MockUserCtl {
	mock := &MockUserCtl{ctrl: ctrl}
	mock.recorder = &MockUserCtlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCtl) EXPECT() *MockUserCtlMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserCtl) Create(name string, pass, salt []byte) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, pass, salt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserCtlMockRecorder) Create(name, pass, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserCtl)(nil).Create), name, pass, salt)
}

// QueryByID mocks base method.
func (m *MockUserCtl) QueryByID(id int64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByID", id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByID indicates an expected call of QueryByID.
func (mr *MockUserCtlMockRecorder) QueryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByID", reflect.TypeOf((*MockUserCtl)(nil).QueryByID), id)
}

// QueryByName mocks base method.
func (m *MockUserCtl) QueryByName(name string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByName", name)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByName indicates an expected call of QueryByName.
func (mr *MockUserCtlMockRecorder) QueryByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByName", reflect.TypeOf((*MockUserCtl)(nil).QueryByName), name)
}

// QueryCredentialsByName mocks base method.
func (m *MockUserCtl) QueryCredentialsByName(name string) (int64, []byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCredentialsByName", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// QueryCredentialsByName indicates an expected call of QueryCredentialsByName.
func (mr *MockUserCtlMockRecorder) QueryCredentialsByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCredentialsByName", reflect.TypeOf((*MockUserCtl)(nil).QueryCredentialsByName), name)
}
